generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model article {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  company   company @relation("CompanyArticles", fields: [companyId], references: [id])
  companyId String  @map("company_id") @db.ObjectId
  content   String
  date      String
  editor    user?   @relation("EditorArticles", fields: [editorId], references: [id])
  editorId  String? @map("editor_id") @db.ObjectId
  image     String
  link      String
  status    String
  title     String
  writer    user    @relation("WriterArticles", fields: [writerId], references: [id])
  writerId  String  @map("writer_id") @db.ObjectId
}

model company {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  logo    String
  name    String
  status  String
  article article[] @relation("CompanyArticles") // Backward relation for company-articles
}

model user {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String          @map("first_name")
  lastName        String          @map("last_name")
  password        String
  status          String
  type            String
  userName        String          @unique @map("user_name")
  articlesEdited  article[]       @relation("EditorArticles") // Backward relation for editor-articles
  articlesWritten article[]       @relation("WriterArticles") // Backward relation for writer-articles
  refreshToken    refresh_token[] @relation("RefreshToken")
}

model refresh_token {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  user           user      @relation("RefreshToken", fields: [userId], references: [id])
  userId         String    @unique @map("user_id") @db.ObjectId
  token          String
  expirationDate DateTime @map("expiration_date")
}
